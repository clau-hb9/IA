// **RECUERDA** PRIORIDAD EN FUNCIÓN DEL ORDEN DE LAS REGLAS (LA SUPERIOR LA MÁS PRIORITARIA)



rule coger_primera_herramienta {
  declarations
    practica.objetos.Trabajador w;
    practica.objetos.Tarea t;
    practica.objetos.Herramienta nuevaH;
  preconditions
  	t.getUnidades() > 0;
  	// Si un trabajador esta en el Almacen
  	w.getArea().equals("A");
  	// Si el trabajador no tiene herramienta
  	w.getHerramienta() == null;
  	// Si la nueva herramienta vale para hacer una tarea 
  	nuevaH.getTrabajo().equals(t.getTipo());
  	// Inicialmente cogemos la herramienta de la mejor habilidad que tiene el trabajador
  	nuevaH.getTrabajo().equals(w.getMaxHability());
  	
  	
  actions
  	// Le damos la herramienta seleccionada al trabajador y se mantiene en el almacen
  	w.setHerramienta(nuevaH);
  	w.imprimeMaxHability();
  	w.imprimeH();
  	modified(w);
}

rule hacer_tarea_limpieza {
  declarations
    practica.objetos.Tarea t;
    practica.objetos.Trabajador w;
    
  preconditions
  	t.getUnidades() > 0;
  	// Si la herramienta del trabajador sirve para limpiar
    w.getHerramienta().getTrabajo().equals("limpiar");
    // Si la tarea a realizar es de limpiar
    t.getTipo().equals("limpiar");
    // Si el area de la tarea es la misma que el trabajador
    t.getArea().equals(w.getArea());
    // Si el trabajador tiene habilidad para hacer esa tarea
    w.getHabLimpiar() > 0;
    
    
  actions
  	// Determinamos las unidades finales de la tarea. Le restamos la habilidad del trabajador.
 	t.setUnidades(t.getUnidades() - w.getHabLimpiar());
 	t.imprime( w.getHerramienta(),w);
 	modified(t);
}

rule hacer_tarea_reparacion {
  declarations
    practica.objetos.Tarea t;
    practica.objetos.Trabajador w;
    
  preconditions
  	t.getUnidades() > 0;
   	// Si la herramienta del trabajador sirve para reparar
    w.getHerramienta().getTrabajo().equals("reparar");
    // Si la tarea a realizar es de reparar
    t.getTipo().equals("reparar");
    // Si el area de la tarea es la misma que el trabajador
    t.getArea().equals(w.getArea());
    // Si el trabajador tiene habilidad para hacer esa tarea
    w.getHabReparar() > 0;
    
  actions
  	// Determinamos las unidades finales de la tarea. Le restamos la habilidad del trabajador.
 	t.setUnidades(t.getUnidades() - w.getHabReparar()); 	
 	t.imprime( w.getHerramienta(),w);
 	modified(t);
}

rule hacer_tarea_poda {
  declarations
    practica.objetos.Tarea t;
    practica.objetos.Trabajador w;
    
  preconditions
  	t.getUnidades() > 0;
   	// Si la herramienta del trabajador sirve para podar
    w.getHerramienta().getTrabajo().equals("podar");
    // Si la tarea a realizar es de podar
    t.getTipo().equals("podar");
    // Si el area de la tarea es la misma que el trabajador
    t.getArea().equals(w.getArea());
    // Si el trabajador tiene habilidad para hacer esa tarea
    w.getHabPodar() > 0;	
    
    
  actions
  	// Determinamos las unidades finales de la tarea. Le restamos la habilidad del trabajador.
 	t.setUnidades(t.getUnidades() - w.getHabPodar());

 	t.imprime(w.getHerramienta(),w);
 	modified(t);
}


rule moverse_hacer_tarea {
  declarations
    practica.objetos.Trabajador w;
    practica.objetos.Tarea t;
   
  preconditions
  	t.getUnidades() > 0;
  	// Si el trabajador tiene la herramienta necesaria para hacer alguna tarea restante del mapa
  	t.getTipo().equals(w.getHerramienta().getTrabajo());
  actions
  	// Desplazamos al trabajador a la nueva area 
  	w.setArea(t.getArea());
  	
  	w.imprime(t.getTipo());
  	modified(w);
}
rule coger_herramienta {
  declarations
    practica.objetos.Trabajador w;
    practica.objetos.Tarea t;
    practica.objetos.Herramienta nuevaH;
    
  preconditions
  	// Si el trabajador llega al almacen
  	w.getArea().equals("A");
  	t.getUnidades() > 0;
  	// Si está la herramienta necesaria para resolver alguna tarea del mapa
  	nuevaH.getTrabajo().equals(t.getTipo());
  	
  actions
  	// Le cambiamos la herramienta al trabajador
  	w.setHerramienta(nuevaH);
  	
  	w.imprimeH();
  	modified(w);
}


rule moverse_almacen {
  declarations
    practica.objetos.Trabajador w;
  preconditions
  	!w.getArea().equals("A");
  	   	
  actions
  	// Desplazamos al trabajador al area
  	w.setArea("A");
  	w.imprimeAlmacen();
  	modified(w);
}



